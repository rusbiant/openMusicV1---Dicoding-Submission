{
	"info": {
		"_postman_id": "be177505-fd34-4c2f-8ac6-576cbe154634",
		"name": "Open Music API V1 Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12297972"
	},
	"item": [
		{
			"name": "Albums",
			"item": [
				{
					"name": "Add Album with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badAlbumPayloads = pm.environment.get('badAlbumPayloads');\r",
									"\r",
									"if (!badAlbumPayloads | badAlbumPayloads.length === 0) {\r",
									"    badAlbumPayloads = [\r",
									"        {},\r",
									"        { name: 1 },\r",
									"        { name: 'Bad song' },\r",
									"        { name: 'Bad song', year: 'dummy' },\r",
									"    ]\r",
									"}\r",
									"\r",
									"const currentBadAlbumPayload = badAlbumPayloads.shift();\r",
									"pm.environment.set('currentBadAlbumPayload', JSON.stringify(currentBadAlbumPayload));\r",
									"pm.environment.set('badAlbumPayloads', badAlbumPayloads);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badAlbumPayloads = pm.environment.get('badAlbumPayloads');\r",
									" \r",
									"    if(badAlbumPayloads && badAlbumPayloads.length > 0) {\r",
									"        postman.setNextRequest('Add Album with Invalid Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadAlbumPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Album with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.albumId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('albumId', responseJson.data.albumId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Viva la vida\",\r\n    \"year\": 2008\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/albums",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Album with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/albums/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Album with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const albumId = pm.environment.get('albumId');\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.album).to.be.an('object');\r",
									"    pm.expect(responseJson.data.album.id).to.equal(albumId);\r",
									"    pm.expect(responseJson.data.album.name).to.equal('Viva la vida');\r",
									"    pm.expect(responseJson.data.album.year).to.equal(2008)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/albums/{{albumId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums",
								"{{albumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Album with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badAlbumPayloads = pm.environment.get('badAlbumPayloads');\r",
									"\r",
									"if (!badAlbumPayloads | badAlbumPayloads.length === 0) {\r",
									"    badAlbumPayloads = [\r",
									"        {},\r",
									"        { name: 1 },\r",
									"        { name: 'Bad song' },\r",
									"        { name: 'Bad song', year: 'dummy' },\r",
									"    ]\r",
									"}\r",
									"\r",
									"const currentBadAlbumPayload = badAlbumPayloads.shift();\r",
									"pm.environment.set('currentBadAlbumPayload', JSON.stringify(currentBadAlbumPayload));\r",
									"pm.environment.set('badAlbumPayloads', badAlbumPayloads);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badAlbumPayloads = pm.environment.get('badAlbumPayloads');\r",
									" \r",
									"    if(badAlbumPayloads && badAlbumPayloads.length > 0) {\r",
									"        postman.setNextRequest('Edit Album with Invalid Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadAlbumPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/albums/{{albumId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums",
								"{{albumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Album with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Viva la vida Revision\",\r\n    \"year\": 2010\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/albums/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Album with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail albums', () => {\r",
									"    const albumId = pm.environment.get('albumId');\r",
									"    const port = pm.environment.get('port');\r",
									"    pm.sendRequest(`http://localhost:${port}/albums/${albumId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.album).to.be.an('object');\r",
									"                pm.expect(responseJson.data.album.id).to.equal(albumId);\r",
									"                pm.expect(responseJson.data.album.name).to.equal('Viva la vida Revision');\r",
									"                pm.expect(responseJson.data.album.year).to.equal(2010);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Viva la vida Revision\",\r\n    \"year\": 2010\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/albums/{{albumId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums",
								"{{albumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Album with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/albums/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Album with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail albums', () => {\r",
									"    const albumId = pm.environment.get('albumId');\r",
									"    const port = pm.environment.get('port');\r",
									"    pm.sendRequest(`http://localhost:${port}/albums/${albumId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/albums/{{albumId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums",
								"{{albumId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Songs",
			"item": [
				{
					"name": "Add Song with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badSongPayloads = pm.environment.get('badSongPayloads');\r",
									"\r",
									"if (!badSongPayloads | badSongPayloads.length === 0) {\r",
									"    badSongPayloads = [\r",
									"        {},\r",
									"        { title: 1 },\r",
									"        { title: 'Life in Technicolor' },\r",
									"        { title: 'Life in Technicolor', year: 'dummy' },\r",
									"        { title: 'Life in Technicolor', year: 2008 },\r",
									"        { title: 'Life in Technicolor', year: 2008, performer: true },\r",
									"        { title: 'Life in Technicolor', year: 2008, performer: 'Coldplay' },\r",
									"        { title: 'Life in Technicolor', year: 2008, performer: 'Coldplay', genre: 123 },\r",
									"    ]\r",
									"}\r",
									"\r",
									"const currentBadSongPayload = badSongPayloads.shift();\r",
									"pm.environment.set('currentBadSongPayload', JSON.stringify(currentBadSongPayload));\r",
									"pm.environment.set('badSongPayloads', badSongPayloads);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badSongPayloads = pm.environment.get('badSongPayloads');\r",
									" \r",
									"    if(badSongPayloads && badSongPayloads.length > 0) {\r",
									"        postman.setNextRequest('Add Song with Invalid Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadSongPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Song with Valid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.songId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('songId', responseJson.data.songId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Life in Technicolor\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Coldplay\",\r\n    \"genre\": \"Pop\",\r\n    \"duration\": 120\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "[No Test] Add Song with Valid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Fix You\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Coldplay\",\r\n    \"genre\": \"Pop\",\r\n    \"duration\": 120\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.songs).to.be.an('array');\r",
									"    pm.expect(responseJson.data.songs).to.length.least(2);\r",
									"\r",
									"    const songs = responseJson.data.songs;\r",
									"    songs.forEach((song) => {\r",
									"        pm.expect(Object.keys(song)).to.length(3);\r",
									"        pm.expect(song.id).to.be.ok;\r",
									"        pm.expect(song.title).to.be.ok;\r",
									"        pm.expect(song.performer).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Songs with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/songs/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Songs with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const songId = pm.environment.get('songId');\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.a('object');\r",
									"    pm.expect(responseJson.data.song).to.be.an('object');\r",
									"    pm.expect(responseJson.data.song.id).to.equal(songId);\r",
									"    pm.expect(responseJson.data.song.title).to.equal('Life in Technicolor');\r",
									"    pm.expect(responseJson.data.song.year).to.equal(2008);\r",
									"    pm.expect(responseJson.data.song.performer).to.equal('Coldplay');\r",
									"    pm.expect(responseJson.data.song.genre).to.equal('Pop');\r",
									"    pm.expect(responseJson.data.song.duration).to.equal(120);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/songs/{{songId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"{{songId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Song with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badSongPayloads = pm.environment.get('badSongPayloads');\r",
									"\r",
									"if (!badSongPayloads | badSongPayloads.length === 0) {\r",
									"    badSongPayloads = [\r",
									"        {},\r",
									"        { title: 1 },\r",
									"        { title: 'Life in Technicolor' },\r",
									"        { title: 'Life in Technicolor', year: 'dummy' },\r",
									"        { title: 'Life in Technicolor', year: 2008 },\r",
									"        { title: 'Life in Technicolor', year: 2008, performer: true },\r",
									"        { title: 'Life in Technicolor', year: 2008, performer: 'Coldplay' },\r",
									"        { title: 'Life in Technicolor', year: 2008, performer: 'Coldplay', genre: 123 },\r",
									"    ]\r",
									"}\r",
									"\r",
									"const currentBadSongPayload = badSongPayloads.shift();\r",
									"pm.environment.set('currentBadSongPayload', JSON.stringify(currentBadSongPayload));\r",
									"pm.environment.set('badSongPayloads', badSongPayloads);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badSongPayloads = pm.environment.get('badSongPayloads');\r",
									" \r",
									"    if(badSongPayloads && badSongPayloads.length > 0) {\r",
									"        postman.setNextRequest('Edit Song with Invalid Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadSongPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs/{{songId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"{{songId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Song with Invalid Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Life in Technicolor revision\",\r\n    \"year\": 2010,\r\n    \"performer\": \"Coldplay 2\",\r\n    \"genre\": \"Hip Hop\",\r\n    \"duration\": 125\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Song with Valid Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail song', () => {\r",
									"    const songId = pm.environment.get('songId');\r",
									"    const port = pm.environment.get('port');\r",
									"    pm.sendRequest(`http://localhost:${port}/songs/${songId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.song).to.be.an('object');\r",
									"                pm.expect(responseJson.data.song.id).to.equal(songId);\r",
									"                pm.expect(responseJson.data.song.title).to.equal('Life in Technicolor revision');\r",
									"                pm.expect(responseJson.data.song.year).to.equal(2010);\r",
									"                pm.expect(responseJson.data.song.performer).to.equal('Coldplay 2');\r",
									"                pm.expect(responseJson.data.song.genre).to.equal('Hip Hop');\r",
									"                pm.expect(responseJson.data.song.duration).to.equal(125)\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Life in Technicolor revision\",\r\n    \"year\": 2010,\r\n    \"performer\": \"Coldplay 2\",\r\n    \"genre\": \"Hip Hop\",\r\n    \"duration\": 125\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs/{{songId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"{{songId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/songs/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song with Valid Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail song', () => {\r",
									"    const songId = pm.environment.get('songId');\r",
									"    const port = pm.environment.get('port');\r",
									"    pm.sendRequest(`http://localhost:${port}/songs/${songId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs/{{songId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"{{songId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Optional] Song in Album",
			"item": [
				{
					"name": "[No test] Prerequisite",
					"item": [
						{
							"name": "Add Album",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.environment.set('albumId', responseJson.data.albumId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Viva la vida\",\r\n    \"year\": 2008\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/albums",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"albums"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Album With No Songs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.environment.set('albumIdWithNoSongs', responseJson.data.albumId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Viva la vida\",\r\n    \"year\": 2008\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/albums",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"albums"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Song A with Album Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.songId).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Life in Technicolor\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Coldplay\",\r\n    \"genre\": \"Pop\",\r\n    \"duration\": 120,\r\n    \"albumId\": \"{{albumId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Song B with Album Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.songId).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Fix you\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Coldplay\",\r\n    \"genre\": \"Pop\",\r\n    \"duration\": 120,\r\n    \"albumId\": \"{{albumId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Album which Contains Songs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const albumId = pm.environment.get('albumId');\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.album).to.be.an('object');\r",
									"    pm.expect(responseJson.data.album.id).to.equal(albumId);\r",
									"    pm.expect(responseJson.data.album.name).to.equal('Viva la vida');\r",
									"    pm.expect(responseJson.data.album.year).to.equal(2008);\r",
									"    pm.expect(responseJson.data.album.songs).to.be.an('array');\r",
									"    pm.expect(responseJson.data.album.songs).to.length(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/albums/{{albumId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums",
								"{{albumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Album which Not Contains Songs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const albumId = pm.environment.get('albumIdWithNoSongs');\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.album).to.be.an('object');\r",
									"    pm.expect(responseJson.data.album.id).to.equal(albumId);\r",
									"    pm.expect(responseJson.data.album.name).to.equal('Viva la vida');\r",
									"    pm.expect(responseJson.data.album.year).to.equal(2008);\r",
									"    pm.expect(responseJson.data.album.songs).to.be.an('array');\r",
									"    pm.expect(responseJson.data.album.songs).to.length(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/albums/{{albumIdWithNoSongs}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"albums",
								"{{albumIdWithNoSongs}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[Optional] Query Parameter",
			"item": [
				{
					"name": "[No Test] Prerequisite",
					"item": [
						{
							"name": "Add Song A",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { songId } } = pm.response.json();\r",
											"pm.environment.set('songIdA', songId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Kupu-kupu Malam\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Chrisye\",\r\n    \"genre\": \"Pop\",\r\n    \"duration\": 120\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/songs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"songs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Song B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { songId } } = pm.response.json();\r",
											"pm.environment.set('songIdB', songId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Cinta\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Chrisye\",\r\n    \"genre\": \"Pop\",\r\n    \"duration\": 120\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/songs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"songs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Song C",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { songId } } = pm.response.json();\r",
											"pm.environment.set('songIdC', songId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Cinta Mati\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Dewa 98\",\r\n    \"genre\": \"Pop\",\r\n    \"duration\": 120\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/songs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"songs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Song D",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { songId } } = pm.response.json();\r",
											"pm.environment.set('songIdD', songId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Kupu-kupu Malam\",\r\n    \"year\": 2008,\r\n    \"performer\": \"Peterpan\",\r\n    \"genre\": \"Rock\",\r\n    \"duration\": 120\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/songs",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"songs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Seach Song using Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.songs).to.be.an('array');\r",
									"    pm.expect(responseJson.data.songs).to.length(2);\r",
									"\r",
									"    const songs = responseJson.data.songs;\r",
									"    songs.forEach((song) => {\r",
									"        pm.expect(Object.keys(song)).to.length(3);\r",
									"        pm.expect(song.id).to.be.ok;\r",
									"        pm.expect(song.title).to.be.ok;\r",
									"        pm.expect(song.title.toLowerCase()).includes('cint');\r",
									"        pm.expect(song.performer).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/songs?title=cint",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs"
							],
							"query": [
								{
									"key": "title",
									"value": "cint"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Seach Song using Performer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.songs).to.be.an('array');\r",
									"    pm.expect(responseJson.data.songs).to.length(2);\r",
									"\r",
									"    const songs = responseJson.data.songs;\r",
									"    songs.forEach((song) => {\r",
									"        pm.expect(Object.keys(song)).to.length(3);\r",
									"        pm.expect(song.id).to.be.ok;\r",
									"        pm.expect(song.title).to.be.ok;\r",
									"        pm.expect(song.performer).to.be.ok;\r",
									"        pm.expect(song.performer.toLowerCase()).to.includes('chris');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/songs?performer=chris",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs"
							],
							"query": [
								{
									"key": "performer",
									"value": "chris"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Seach Song using Title and Performer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.songs).to.be.an('array');\r",
									"    pm.expect(responseJson.data.songs).to.length(1);\r",
									"\r",
									"    const songs = responseJson.data.songs;\r",
									"    songs.forEach((song) => {\r",
									"        pm.expect(Object.keys(song)).to.length(3);\r",
									"        pm.expect(song.id).to.be.ok;\r",
									"        pm.expect(song.title).to.be.ok;\r",
									"        pm.expect(song.title.toLowerCase()).to.includes('kupu');\r",
									"        pm.expect(song.performer).to.be.ok;\r",
									"        pm.expect(song.performer.toLowerCase()).to.includes('peter');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/songs?title=kupu&performer=peter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs"
							],
							"query": [
								{
									"key": "title",
									"value": "kupu"
								},
								{
									"key": "performer",
									"value": "peter"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs/{{songIdA}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"{{songIdA}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song B",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs/{{songIdB}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"{{songIdB}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song C",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs/{{songIdC}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"{{songIdC}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song D",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/songs/{{songIdD}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"songs",
								"{{songIdD}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}